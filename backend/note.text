// app.get('/forgot-password', (req, res, next) => {
//     res.render('forgot-password');
// })

// app.post('/forgot-password', async (req, res, next) => {
//     const { email } = req.body;
//     // make sure user exist in database
//     const user = await User.findOne({ email });
//     if (!user) {
//         return res.status(400).send("user not registered from this email");
//     }
//     // user exist and now create one time password valid for 15 minutes
//     const secret = JWT_SECRET + user.password;
//     const payload = {
//         email: user.email,
//         id: user.id
//     }
//     const token = jwt.sign(payload, secret, { expiresIn: '15m' });
//     const link = `http://localhost:${PORT}/reset-password/${user.id}/${token}`;
//     // console.log(link);
//     // have to send email by node mailer 
//     const msg = {
//         from: "aqibali.cse18@satyug.edu.in", // sender address
//         to: "aqibali0401@gmail.com", // list of receivers
//         subject: "Hello âœ” NodeMailer testing", // Subject line
//         // text: `this is link for reset password ->  ${link}`, // plain text body
//         html: ` <h1>This is mail form Split Wise Clone By Aqib</h1>
//     <a href="${link}" style="color: blue;">Click here for reset password</a>`, // html body
//     }


//     nodemailer.createTransport({
//         service: 'gmail.com',
//         auth: {
//             user: "aqibali.cse18@satyug.edu.in",
//             pass: "yhbnuwtccwpfruqi"
            
//         },
//         port: 465,
//         host: 'smtp.gmail.com'
//     })
//     .sendMail(msg, (err) => {
//             if (err) {
//                 console.log('Error occurs ', err);
//             } else {
//                 console.log('Email sent successfully!!');
//             }
//         })

//     res.send('Password reset link has been sent to your email....');

// })

// app.get('/reset-password/:id/:token', async (req, res) => {
//     const { id, token } = req.params;
//     const user = await User.findById(id);
//     if (!user) {
//         res.send("Invalid id");
//         return;
//     }
//     // we have valid id, and we have a valid user with this id
//     const secret = JWT_SECRET + user.password;
//     try {
//         const payload = jwt.sign(token, secret);
//         res.render('reset-password', { email: user.email });
//     } catch (error) {
//         console.log("error aya bhai", error.message);
//         res.send(error.message);
//     }

// })

// app.post('/reset-password/:id/:token', async (req, res, next) => {
//     const { id, token } = req.params;
//     // check if the id exist in the database or not
//     const user = await User.findById(id);
//     const { password, password2 } = req.body;
//     if (!user) {
//         res.send("user not exist with this id....");
//         return;
//     }
//     const secret = JWT_SECRET + user.password;
//     try {
//         const payload = jwt.verify(token, secret);
//         // validate password and password2 should match
//         if (password !== password2) {
//             return res.send('Password and Confirm Password are not matching...');
//         }
//         // we can simply find the user using payload email and id and finally update with new password
//         const hashedPassword = await bcrypt.hash(password, 12);
//         user.password = hashedPassword;
//         user.save();
//         res.send({
//             message: "password has been updated...",
//             result: user
//         })

//     } catch (error) {
//         console.log(error.message);
//         res.send(error.message);
//     }
// })
